
// Enums
enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JobType {
  FULL
  PART
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  INSURANCE
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
  REFUNDED
}

enum VaccineStatus {
  DUE
  GIVEN
  OVERDUE
  EXPIRED
  CATCH_UP
}

enum GrowthMeasurementType {
  WEIGHT
  HEIGHT
  HEAD_CIRCUMFERENCE
  BMI
}

enum MilestoneCategory {
  GROSS_MOTOR
  FINE_MOTOR
  LANGUAGE
  SOCIAL_EMOTIONAL
  COGNITIVE
}

// Models

model Patient {
  id                      String    @id @default(cuid()) @map("patient_id")
  firstName               String    @map("first_name")
  lastName                String    @map("last_name")
  dateOfBirth             DateTime  @map("date_of_birth")
  gender                  Gender    @default(MALE)
  phone                   String    @unique @map("patient_phone")
  email                   String?   @unique @map("patient_email")
  parentGuardianName      String    @map("parent_guardian_name")
  parentGuardianPhone     String    @map("parent_guardian_phone")
  parentGuardianEmail     String?   @map("parent_guardian_email")
  relationToPatient       String    @map("relation_to_patient")
  address                 String
  emergencyContactName    String    @map("emergency_contact_name")
  emergencyContactNumber  String    @map("emergency_contact_number")
  relationToEmergency     String    @map("relation_to_emergency")
  bloodGroup              String?   @map("blood_group")
  allergies               String?
  medicalConditions       String?   @map("medical_conditions")
  medicalHistory          String?   @map("medical_history")
  insuranceProvider       String?   @map("insurance_provider")
  insuranceNumber         String?   @map("insurance_number")
  privacyConsent          Boolean   @map("privacy_consent")
  serviceConsent          Boolean   @map("service_consent")
  medicalConsent          Boolean   @map("medical_consent")
  img                     String?
  colorCode               String?   @map("color_code")

  appointments            Appointment[]
  medicalRecords          MedicalRecord[]
  payments                Payment[]
  ratings                 Rating[]
  immunizations           Immunization[]
  growthMeasurements      GrowthMeasurement[]
  developmentalMilestones DevelopmentalMilestone[]

  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  @@index([firstName, lastName])
  @@index([parentGuardianPhone])
  @@map("patients")
}

model Doctor {
  id                     String                 @id @default(cuid()) @map("doctor_id")
  email                  String                 @unique
  name                   String                
  specialization         String                
  licenseNumber          String                 @unique @map("license_number")
  phone                  String                 @unique
  address                String
  department             String?               
  img                    String?
  colorCode              String?                @map("color_code")
  availabilityStatus     String?                @map("availability_status")

  jobType                JobType                @default(FULL) @map("job_type")
  workingDays            WorkingDay[]
  appointments           Appointment[]
  ratings                Rating[]
  diagnoses              Diagnosis[]
  immunizationsAdministered Immunization[]      @relation("AdministeredByDoctor")
  milestonesAssessed     DevelopmentalMilestone[] @relation("AssessedByDoctor")

  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")

  @@index([name])
  @@map("doctors")
}

model WorkingDay {
  id        Int      @id @default(autoincrement()) @map("working_day_id")
  doctorId  String   @map("doctor_id")
  day       String  
  startTime String   @map("start_time")
  closeTime String   @map("close_time")

  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([doctorId, day])
  @@index([day, startTime])
  @@map("working_days")
}

model Staff {
  id            String    @id @default(cuid()) @map("staff_id")
  email         String    @unique
  name          String   
  phone         String    @unique
  address       String
  department    String?  
  img           String?
  licenseNumber String?   @unique @map("license_number")
  colorCode     String?   @map("color_code")

  role          Role     
  status        Status    @default(ACTIVE)

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([name])
  @@map("staff")
  Rating Rating[]
}

model Appointment {
  id             Int               @id @default(autoincrement()) @map("appointment_id")
  patientId      String            @map("patient_id")
  doctorId       String            @map("doctor_id")
  appointmentDate DateTime         @map("appointment_date")
  time           String
  status         AppointmentStatus @default(PENDING)
  type           String           
  note           String?
  reason         String?

  patient        Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor         Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  payments       Payment[]
  medicalRecords MedicalRecord[]

  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  @@index([patientId, doctorId, appointmentDate])
  @@index([appointmentDate, status])
  @@map("appointments")
}

model Payment {
  id             Int           @id @default(autoincrement()) @map("payment_id")
  billId         Int?          @map("bill_id")
  patientId      String        @map("patient_id")
  appointmentId  Int           @unique @map("appointment_id")
  billDate       DateTime      @map("bill_date")
  paymentDate    DateTime      @map("payment_date")
  discount       Float
  totalAmount    Float         @map("total_amount")
  amountPaid     Float         @map("amount_paid")

  paymentMethod  PaymentMethod @default(CASH) @map("payment_method")
  status         PaymentStatus @default(UNPAID)
  receiptNumber  Int           @unique @default(autoincrement()) @map("receipt_number")

  appointment    Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient        Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientBills   PatientBill[]

  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  @@index([patientId, paymentDate])
  @@index([status, paymentDate])
  @@map("payments")
}

model PatientBill {
  id           Int      @id @default(autoincrement()) @map("patient_bill_id")
  billId       Int      @map("bill_id") // Foreign key to Payment.id
  serviceId    Int      @map("service_id")
  serviceDate  DateTime @map("service_date")
  quantity     Int
  unitCost     Float    @map("unit_cost")
  totalCost    Float    @map("total_cost")

  service      Service  @relation(fields: [serviceId], references: [id])
  payment      Payment  @relation(fields: [billId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([billId, serviceId])
  @@index([serviceId, serviceDate])
  @@map("patient_bills")
}

model LabTest {
  id              Int           @id @default(autoincrement()) @map("lab_test_id")
  medicalRecordId Int           @map("medical_record_id")
  testDate        DateTime      @map("test_date")
  result          String
  status          String       
  notes           String?
  serviceId       Int           @unique @map("service_id")
  service         Service       @relation(fields: [serviceId], references: [id])

  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@index([medicalRecordId, testDate])
  @@index([testDate, status])
  @@map("lab_tests")
}

model MedicalRecord {
  id              Int           @id @default(autoincrement()) @map("medical_record_id")
  patientId       String        @map("patient_id")
  appointmentId   Int           @unique @map("appointment_id")
  doctorId        String        @map("doctor_id")
  treatmentPlan   String?       @map("treatment_plan")
  prescriptions   String?
  labRequest      String?       @map("lab_request")
  notes           String?
  chiefComplaint  String?       @map("chief_complaint")
  hpi             String?
  ros             String?
  physicalExam    String?       @map("physical_exam")
  assessment      String?

  appointment     Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient         Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labTests        LabTest[]
  vitalSigns      VitalSign[]
  diagnoses       Diagnosis[]

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@index([patientId, createdAt])
  @@index([doctorId, createdAt])
  @@map("medical_records")
}

model VitalSign {
  id                 Int           @id @default(autoincrement()) @map("vital_sign_id")
  patientId          String        @map("patient_id")
  medicalRecordId    Int           @map("medical_record_id")
  medicalRecord      MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  bodyTemperature    Float         @map("body_temperature")
  systolic           Int?
  diastolic          Int?
  heartRate          Float?        @map("heart_rate") // Changed to float for numeric
  respiratoryRate    Int?          @map("respiratory_rate")
  oxygenSaturation   Int?          @map("oxygen_saturation")
  weight             Float
  height             Float
  headCircumference  Float?        @map("head_circumference")
  bmi                Float?

  nutritionalComment String?       @map("nutritional_comment")

  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  @@index([medicalRecordId, createdAt])
  @@index([patientId, createdAt])
  @@map("vital_signs")
}

model Diagnosis {
  id                  Int           @id @default(autoincrement()) @map("diagnosis_id")
  patientId           String        @map("patient_id")
  medicalRecordId     Int           @map("medical_record_id")
  doctorId            String        @map("doctor_id")
  symptoms            String
  diagnosisName       String        @map("diagnosis_name")
  notes               String?
  prescribedMedications String?     @map("prescribed_medications")
  followUpPlan        String?       @map("follow_up_plan")

  medicalRecord       MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  doctor              Doctor        @relation(fields: [doctorId], references: [id])

  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  @@index([medicalRecordId, createdAt])
  @@index([patientId, diagnosisName, createdAt])
  @@index([doctorId, createdAt])
  @@map("diagnoses")
}

model AuditLog {
  id        Int      @id @default(autoincrement()) @map("audit_log_id")
  userId    String   @map("user_id")
  recordId  String   @map("record_id")
  action    String  
  details   String?
  modelName String   @map("model_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, action, modelName, createdAt])
  @@map("audit_logs")
}

model Rating {
  id        Int      @id @default(autoincrement()) @map("rating_id")
  staffId   String   @map("staff_id")
  patientId String   @map("patient_id")
  rating    Int     
  comment   String?

  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([patientId, staffId])
  @@index([staffId, rating])
  @@map("ratings")
  Doctor Doctor[]
}

model Service {
  id           Int           @id @default(autoincrement()) @map("service_id")
  serviceName  String        @unique @map("service_name")
  description  String
  price        Float
  labTest      LabTest?
  patientBills PatientBill[]

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("services")
}

model GrowthMeasurement {
  id                        Int                 @id @default(autoincrement()) @map("growth_measurement_id")
  patientId                 String              @map("patient_id")
  measurementDate           DateTime            @map("measurement_date")
  measurementType           GrowthMeasurementType @map("measurement_type")
  value                     Float
  unit                      String
  notes                     String?
  zScore                    Float?              @map("z_score")
  percentile                Float?

  patient                   Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @updatedAt @map("updated_at")

  @@index([patientId, measurementDate, measurementType])
  @@map("growth_measurements")
}

model Immunization {
  id                       Int           @id @default(autoincrement()) @map("immunization_id")
  patientId                String        @map("patient_id")
  vaccineName              String        @map("vaccine_name")
  doseNumber               Int           @map("dose_number")
  administrationDate       DateTime      @map("administration_date")
  nextDoseDate             DateTime?     @map("next_dose_date")
  status                   VaccineStatus
  administeredByDoctor     Doctor?       @relation("AdministeredByDoctor", fields: [administeredByDoctorId], references: [id])
  administeredByDoctorId   String?       @map("administered_by_doctor_id")
  batchNumber              String?       @map("batch_number")
  notes                    String?

  patient                  Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt                DateTime      @default(now()) @map("created_at")
  updatedAt                DateTime      @updatedAt @map("updated_at")

  @@index([patientId, vaccineName, administrationDate])
  @@index([status, nextDoseDate])
  @@map("immunizations")
}

model DevelopmentalMilestone {
  id                       Int                 @id @default(autoincrement()) @map("developmental_milestone_id")
  patientId                String              @map("patient_id")
  milestoneCategory        MilestoneCategory   @map("milestone_category")
  milestoneDescription     String              @map("milestone_description")
  achievedDate             DateTime            @map("achieved_date")
  notes                    String?
  assessedByDoctor         Doctor?             @relation("AssessedByDoctor", fields: [assessedByDoctorId], references: [id])
  assessedByDoctorId       String?             @map("assessed_by_doctor_id")

  patient                  Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt                DateTime            @default(now()) @map("created_at")
  updatedAt                DateTime            @updatedAt @map("updated_at")

  @@index([patientId, milestoneCategory, achievedDate])
  @@index([milestoneCategory, achievedDate])
  @@map("developmental_milestones")
}